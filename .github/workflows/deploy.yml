name: Deploy Image Application and Authorization Service

on:
  push:
    branches:
      - main

jobs:
  preapply:
    name: check if pre-apply stack exists
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if pre-apply stack exists
        id: check_stack
        run: |
          if aws cloudformation describe-stacks --stack-name pre-apply-stack >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy pre-apply stack if missing
        if: steps.check_stack.outputs.exists == 'false'
        run: |
          echo "Deploying pre-apply CloudFormation stack..."
          aws cloudformation deploy \
            --stack-name pre-apply-stack \
            --template-file aws/pre-apply.yaml \
            --capabilities CAPABILITY_NAMED_IAM

  deployment-pre-build:
    name: Deployment - infrastructure for ECS
    runs-on: ubuntu-latest
    needs: preapply

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check and delete family-photos-infra if in ROLLBACK_COMPLETE
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name family-photos-infra --query "Stacks[0].StackStatus" --output text || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE. Deleting..."
            aws cloudformation delete-stack --stack-name family-photos-infra
            # Wait for deletion to complete
            aws cloudformation wait stack-delete-complete --stack-name family-photos-infra
          else
            echo "Stack status is $STATUS. No delete needed."
          fi
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy infra stack (before building images)
        uses: aws-actions/aws-cloudformation-github-deploy@master
        with:
          name: family-photos-infra
          template: aws/cf_infra_pre_build.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
          parameter-overrides: |
            Environment=Production

  deployment-docker-build:
    name: Deployment - images
    runs-on: ubuntu-latest
    needs: deployment-pre-build
    outputs:
      auth_digest: ${{ steps.auth_digest.outputs.digest }}
      image_digest: ${{ steps.image_digest.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: AWS ECR Login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_ACCOUNT_IDS: ${{ secrets.AWS_ACCOUNT_ID }}

      # Docker build & push auth-service
      - name: Build auth-service image
        run: docker build -t auth-service ./auth
      - name: Push auth-service
        run: |
          docker tag auth-service:latest "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/auth-service:latest"
          docker push "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/auth-service:latest"
      - name: Get auth-service digest
        id: auth_digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name auth-service \
            --query 'imageDetails[?imageTags[0]==`latest`].imageDigest' \
            --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # Docker build & push image-app
      - name: Build image-app
        run: docker build -t image-app ./image
      - name: Push image-app
        run: |
          docker tag image-app:latest "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/image-app:latest"
          docker push "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/image-app:latest"
      - name: Get image-app digest
        id: image_digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name image-app \
            --query 'imageDetails[?imageTags[0]==`latest`].imageDigest' \
            --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

  deployment-post-build:
    name: Deployment - frontend infrastructure
    runs-on: ubuntu-latest
    needs: deployment-docker-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check and delete family-photos-infra-post if in ROLLBACK_COMPLETE
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name family-photos-infra-post --query "Stacks[0].StackStatus" --output text || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE. Deleting..."
            aws cloudformation delete-stack --stack-name family-photos-infra-post
            # Wait for deletion to complete
            aws cloudformation wait stack-delete-complete --stack-name family-photos-infra-post
          else
            echo "Stack status is $STATUS. No delete needed."
          fi
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy infra stack (after building images)
        uses: aws-actions/aws-cloudformation-github-deploy@master
        with:
          name: family-photos-infra-post
          template: aws/cf_infra_post_build.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
          parameter-overrides: |
            Environment=Production,
            PGUser=${{ secrets.PG_USER }},
            PGPassword=${{ secrets.PG_PASSWORD }},
            S3BucketName=photo-mordanov

  finalisation:
    name: DNS name for application
    runs-on: ubuntu-latest
    needs: deployment-post-build

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get CloudFront domain from stack outputs
        id: get_cf_domain
        run: |
          DOMAIN=$(aws cloudformation describe-stacks \
            --stack-name family-photos-infra \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDomainName'].OutputValue" \
            --output text)
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "ðŸš€ CloudFront HTTPS domain: https://$DOMAIN"