AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Fargate Infrastructure with ALB Path-Based Routing, fronted by CloudFront

Parameters:
  Environment:
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment name for resource tagging

Resources:
  ######################################
  # ECS Cluster
  ######################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-family-photos-cluster"

  ######################################
  # ECR Repositories
  ######################################
  AuthECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: auth-service
      ImageTagMutability: MUTABLE

  ImageECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: image-app
      ImageTagMutability: MUTABLE

  ######################################
  # IAM Roles
  ######################################
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecsExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecsTaskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ######################################
  # CloudWatch Log Groups
  ######################################
  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/auth-service"
      RetentionInDays: 14

  ImageAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/image-app"
      RetentionInDays: 14

  ######################################
  # Security Groups
  ######################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from CloudFront to ALB
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS tasks
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ######################################
  # Load Balancer
  ######################################
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-family-photos-alb"
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: family-photos-preapply-PublicSubnet1
        - Fn::ImportValue: family-photos-preapply-PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  ######################################
  # Target Groups
  ######################################
  AuthTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-auth-tg"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      HealthCheckPath: /

  ImageAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-image-tg"
      Port: 8081
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      HealthCheckPath: /

  ######################################
  # Listener (HTTP only for CloudFront)
  ######################################
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "Not Found"

  ######################################
  # Path-based routing rules
  ######################################
  HTTPRuleAuth:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 10
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AuthTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/auth*"

  HTTPRuleImageApp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 20
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ImageAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/image*"

  ######################################
  # ECS Services (task defs updated via pipeline)
  ######################################
  AuthService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: auth-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: family-photos-preapply-PublicSubnet1
            - Fn::ImportValue: family-photos-preapply-PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref AuthTargetGroup
          ContainerName: auth-service
          ContainerPort: 8080

  ImageAppService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: image-app
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: family-photos-preapply-PublicSubnet1
            - Fn::ImportValue: family-photos-preapply-PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ImageAppTargetGroup
          ContainerName: image-app
          ContainerPort: 8081

  ######################################
  # CloudFront Distribution (free *.cloudfront.net domain)
  ######################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: https-only
          AllowedMethods: ["GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2
        IsIPV6Enabled: true

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  ExecutionRoleARN:
    Description: ECS Execution Role ARN
    Value: !GetAtt ECSExecutionRole.Arn
  TaskRoleARN:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
  ALBURL:
    Description: ALB Public DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  CloudFrontDomainName:
    Description: Free CloudFront domain name (HTTPS ready)
    Value: !GetAtt CloudFrontDistribution.DomainName