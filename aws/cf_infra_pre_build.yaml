AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure excluding ECS deployments (with ECR + Cloud Map + private connectivity)

Parameters:
  Environment:
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment name for resource tagging

Resources:
  ######################################
  # ECR Repositories
  ######################################
  AuthECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: auth-service
      ImageTagMutability: MUTABLE

  ImageECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: image-app
      ImageTagMutability: MUTABLE

  ######################################
  # IAM Roles
  ######################################
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecsExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogsPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"
        - PolicyName: ECSExtraPullPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecsTaskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ######################################
  # CloudWatch Log Groups
  ######################################
  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/auth-service"
      RetentionInDays: 14

  ImageAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/image-app"
      RetentionInDays: 14

  ######################################
  # Security Groups
  ######################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from CloudFront to ALB
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS tasks
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ######################################
  # Load Balancer + Target Groups + Listener Rules
  ######################################
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-family-photos-alb"
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: family-photos-preapply-PublicSubnet1
        - Fn::ImportValue: family-photos-preapply-PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  AuthTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-auth-tg"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      HealthCheckPath: /
      HealthCheckPort: "8080"
      HealthCheckProtocol: HTTP

  ImageAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-image-tg"
      Port: 8501
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      HealthCheckPath: /healthz
      HealthCheckPort: "8501"
      HealthCheckProtocol: HTTP

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "Not Found"

  HTTPRuleAuth:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 10
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AuthTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ "/api/auth*" ]

  HTTPRuleImageApp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 20
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ImageAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ "/api/image*" ]

  ######################################
  # CloudFront
  ######################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: https-only
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE" ]
          CachedMethods: [ "GET", "HEAD" ]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2
        IPV6Enabled: true

  ######################################
  # EFS for Postgres
  ######################################
  PostgresEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub "${Environment}-postgres-efs"

  PostgresEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS access to EFS
      VpcId:
        Fn::ImportValue: family-photos-preapply-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  PostgresEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref PostgresEFS
      SubnetId:
        Fn::ImportValue: family-photos-preapply-PublicSubnet1
      SecurityGroups: [ !Ref PostgresEFSSecurityGroup ]

  PostgresEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref PostgresEFS
      SubnetId:
        Fn::ImportValue: family-photos-preapply-PublicSubnet2
      SecurityGroups: [ !Ref PostgresEFSSecurityGroup ]

  ######################################
  # Cloud Map namespace (Private DNS)
  ######################################
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: local
      Description: Private namespace for ECS services
      Vpc:
        Fn::ImportValue: family-photos-preapply-VpcId

Outputs:
  ExecutionRoleARN:
    Description: ECS Execution Role ARN
    Value: !GetAtt ECSExecutionRole.Arn
    Export:
      Name: family-photos-ExecutionRoleARN

  TaskRoleARN:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: family-photos-TaskRoleARN

  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: family-photos-ECSSecurityGroupId

  AuthTargetGroupArn:
    Description: Auth Target Group ARN
    Value: !Ref AuthTargetGroup
    Export:
      Name: family-photos-AuthTargetGroupArn

  ImageAppTargetGroupArn:
    Description: Image App Target Group ARN
    Value: !Ref ImageAppTargetGroup
    Export:
      Name: family-photos-ImageAppTargetGroupArn

  PostgresEFSId:
    Description: EFS FileSystem for Postgres data
    Value: !Ref PostgresEFS
    Export:
      Name: family-photos-PostgresEFSId

  PostgresEFSSecurityGroupId:
    Description: EFS Security Group ID
    Value: !Ref PostgresEFSSecurityGroup
    Export:
      Name: family-photos-PostgresEFSSecurityGroupId

  ALBURL:
    Description: ALB Public DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: family-photos-ALBURL

  CloudFrontDomainName:
    Description: Free CloudFront domain name (HTTPS ready)
    Value: !GetAtt CloudFrontDistribution.DomainName

  ServiceDiscoveryNamespaceId:
    Description: Private DNS namespace ID
    Value: !Ref ServiceDiscoveryNamespace
    Export:
      Name: family-photos-ServiceDiscoveryNamespaceId
